#+TITLE: LLDP パケットをパース/生成するには
#+FILETAGS: KOBACHI
#+ICALENDAR_EXCLUDE_TAGS: noex

ネットワークパケットを制御するには，ネットワーク全体の「地図」が必要で
す．このためには，スイッチ同士の物理的なつながり (リンク) を一つひとつ
検出し，全体としてどのようなネットワークトポロジになっているかを調べます．

OpenFlow でこのリンクを発見する方法として代表的なのが，Link Layer
Discovery Protocol (LLDP) パケットを使った方法です．LLDP はもともと，隣
接したネットワーク機器同士の接続を検出したり，ネットワーク機器の情報を
管理するためのプロトコルで，IEEE802.1AB で標準化されています．OpenFlow
はこの LLDP をうまく使うことで，ネットワークトポロジを検出できます．

LLDP パケットには LLDP パケットを出したスイッチの dpid や，送信ポート番
号などリンクを検知するための様々な情報が入っています． =Pio= ライブラリ
が提供する =Pio::Lldp= クラスを使うと，Packet In ハンドラでつかまえた
LLDP パケットからこれらの情報を取り出したり，また Packet Out メッセージ
を使って LLDP パケットを送ることができます．

* パース

たとえば，パースするには =Pio::Lldp.read= メソッドにパケットのバイナリ
リテラルを渡す．パースに成功すると，lldp の各フィールドをアクセサメソッ
ドで参照できる．

#+BEGIN_SRC ruby
require "pio"

lldp = Pio::Lldp.read( binary_data )

lldp.ttl #=> 120
#+END_SRC

* 生成

LLDP フレームを生成するには =Pio::Lldp.new= メソッドを使う．指定したい
オプションは引数として次のように渡す．

#+BEGIN_SRC ruby
require "pio"

lldp = Pio::Lldp.new( dpid: 0x123, port_number: 12 )
lldp.to_binary  #=> LLDP frame in binary format.
#+END_SRC

* 使用例

http://github.com/yasuhito/ruby_topology/ が Pio の Lldp クラスを使って
いる．
